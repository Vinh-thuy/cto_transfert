#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Script de test pour v√©rifier la connexion WebSocket avec l'agent LangGraph.
Ce script se connecte au WebSocket, envoie un message et affiche la r√©ponse.
"""

import asyncio
import json
import websockets
import logging

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)

# Configuration du WebSocket
WEBSOCKET_HOST = 'localhost'
WEBSOCKET_PORT = 8002
WEBSOCKET_PATH = '/v1/agents/langgraph/ws'
USER_ID = 'test_user'

# URI du WebSocket
WEBSOCKET_URI = f"ws://{WEBSOCKET_HOST}:{WEBSOCKET_PORT}{WEBSOCKET_PATH}?user_id={USER_ID}"


async def test_websocket_connection():
    """Teste la connexion WebSocket avec l'agent LangGraph."""
    try:
        logging.info(f"Tentative de connexion √† : {WEBSOCKET_URI}")
        
        async with websockets.connect(WEBSOCKET_URI) as websocket:
            logging.info("‚úÖ Connexion WebSocket √©tablie")
            
            # Pr√©parer le message √† envoyer
            message = {
                "input": "Raconte-moi une blague sur les chats"
            }
            
            # Convertir en JSON et envoyer
            json_message = json.dumps(message)
            logging.info(f"üì§ Envoi du message : {json_message}")
            await websocket.send(json_message)
            logging.info("üì© Message envoy√© avec succ√®s")
            
            # Attendre la r√©ponse
            logging.info("‚è≥ En attente de r√©ponse...")
            response = await websocket.recv()
            logging.info(f"üì• R√©ponse re√ßue : {response}")
            
            # Analyser la r√©ponse
            try:
                parsed_response = json.loads(response)
                logging.info(f"üîç R√©ponse analys√©e : {json.dumps(parsed_response, indent=2, ensure_ascii=False)}")
                
                # V√©rifier si la r√©ponse contient une erreur
                if "error" in parsed_response:
                    logging.error(f"‚ùå Erreur re√ßue : {parsed_response['error']}")
                else:
                    logging.info("‚úÖ Communication r√©ussie avec l'agent LangGraph")
            except json.JSONDecodeError as e:
                logging.error(f"‚ùå Erreur lors de l'analyse de la r√©ponse JSON : {e}")
                logging.error(f"R√©ponse brute : {response}")
    
    except websockets.exceptions.ConnectionClosedError as e:
        logging.error(f"‚ùå La connexion a √©t√© ferm√©e de mani√®re inattendue : {e}")
    except Exception as e:
        logging.error(f"‚ùå Erreur lors de la connexion WebSocket : {type(e).__name__} - {e}")


async def test_multiple_messages():
    """Teste l'envoi de plusieurs messages cons√©cutifs."""
    try:
        logging.info(f"Tentative de connexion √† : {WEBSOCKET_URI}")
        
        async with websockets.connect(WEBSOCKET_URI) as websocket:
            logging.info("‚úÖ Connexion WebSocket √©tablie")
            
            # Liste de messages √† tester
            messages = [
                "Raconte-moi une blague",
                "√âcris un po√®me sur la nature",
                "Raconte-moi une histoire courte"
            ]
            
            for msg in messages:
                # Pr√©parer le message
                message = {"input": msg}
                json_message = json.dumps(message)
                
                # Envoyer le message
                logging.info(f"üì§ Envoi du message : {json_message}")
                await websocket.send(json_message)
                logging.info("üì© Message envoy√© avec succ√®s")
                
                # Attendre la r√©ponse
                logging.info("‚è≥ En attente de r√©ponse...")
                response = await websocket.recv()
                logging.info(f"üì• R√©ponse re√ßue pour '{msg}'")
                
                # Analyser la r√©ponse
                try:
                    parsed_response = json.loads(response)
                    if "response" in parsed_response:
                        content = parsed_response["response"]
                        # Afficher les 100 premiers caract√®res de la r√©ponse
                        preview = content[:100] + "..." if len(content) > 100 else content
                        logging.info(f"üîç R√©ponse : {preview}")
                    else:
                        logging.warning(f"‚ö†Ô∏è Format de r√©ponse inattendu : {parsed_response}")
                except json.JSONDecodeError:
                    logging.error(f"‚ùå R√©ponse non-JSON : {response}")
                
                # Attendre un peu avant le prochain message
                await asyncio.sleep(1)
    
    except Exception as e:
        logging.error(f"‚ùå Erreur : {type(e).__name__} - {e}")


async def main():
    """Fonction principale qui ex√©cute les tests."""
    logging.info("üöÄ D√©marrage des tests WebSocket pour l'agent LangGraph")
    
    # Test de connexion simple
    logging.info("\n=== Test de connexion simple ===")
    await test_websocket_connection()
    
    # Test avec plusieurs messages
    logging.info("\n=== Test avec plusieurs messages ===")
    await test_multiple_messages()
    
    logging.info("‚úÖ Tests termin√©s")


if __name__ == "__main__":
    # Ex√©cuter la fonction principale de mani√®re asynchrone
    asyncio.run(main())
